import Zen.Init

/-! # Dependent lists -/
namespace Zen

/-- Implementation detail for `DList`: dependent list type with reversed arguments.

We want `DList n Œ±`, but doing so makes `Œ± : Type u` a parameter of the constructors, causing to
jump a universe and thus `DList n Œ± : Type u + 1` which is bad.
-/
inductive DList.DList' (Œ± : Type u) : (n : Nat) ‚Üí Type u
| nil : DList' Œ± 0
| cons (head : Œ±) (tail : DList' Œ± n) : DList' Œ± n.succ

/-- Dependent lists of length `n` storing `Œ±`-elements.

This type is realized by `DList.DList'`, so make sure to use `.nil` and `.cons` when
pattern-matching `DList`-values. Constructors are re-exported under `DList`: `DList.nil` and
`DList.cons`.
-/
def DList (n : Nat) (Œ± : Type u) : Type u :=
  DList.DList' Œ± n

namespace DList

/-! ## Constructors and basic functions -/

/-- The empty list. -/
def nil : DList 0 Œ± :=
  DList'.nil

/-- Builds a `DList (n + 1)` from a `DList n`. -/
def cons (head : Œ±) (tail : DList n Œ±) : DList n.succ Œ± :=
  DList'.cons head tail

/-- The length of a list. -/
abbrev length (_ : DList n Œ±) : Nat := n

@[inherit_doc length]
abbrev len := @length

/-- Legal index for a list `dl`, allows writing `dl.Idx`. -/
abbrev Idx (_ : DList n Œ±) : Type := Fin n

/-- Builds a list that repeats a value `n` times. -/
def many (a : Œ±) (n : Nat) : DList n Œ± :=
  aux .nil n (by simp)
where
  aux : {i : Nat} ‚Üí (acc : DList i Œ±) ‚Üí (j : Nat) ‚Üí (h : i + j = n) ‚Üí DList n Œ±
  | _, acc, 0, h => h ‚ñ∏ acc
  | _, acc, j + 1, h =>
    aux (acc.cons a) j (by omega)

/-- Builds a list that repeats a default value `n` times. -/
def manyD [Inhabited Œ±] (n : Nat) : DList n Œ± :=
  many default n

@[inherit_doc many]
def gen (a : Œ±) : DList n Œ± := many a n

@[inherit_doc manyD]
def genD [Inhabited Œ±] : DList n Œ± := manyD n

/-- Reverses a list. -/
def reverse (self : DList n Œ±) : DList n Œ± :=
  aux .nil self (by simp)
where
  aux {i j : Nat} : (acc : DList i Œ±) ‚Üí (dl : DList j Œ±) ‚Üí (h : i + j = n) ‚Üí DList n Œ±
  | acc, .nil, h => h.symm ‚ñ∏ acc
  | acc, .cons hd tl, h =>
    aux (acc.cons hd) tl (by omega)

/-! ## `map` -/

/-- Monadic map, gives access to indices. -/
def mapIdxM [Monad m]
  (self : DList n Œ±)
  (f : self.Idx ‚Üí Œ± ‚Üí m Œ≤)
: m (DList n Œ≤) :=
  aux (by simp) self
where
  aux : {i : Nat} ‚Üí (h : i ‚â§ n) ‚Üí DList i Œ± ‚Üí m (DList i Œ≤)
  | 0, _, .nil => return .nil
  | i + 1, h, .cons hd tl => do
    let idx : self.Idx :=
      ‚ü®n - (i + 1), Nat.sub_lt_of_pos_le (by simp) h‚ü©
    let hd ‚Üê f idx hd
    let tl : DList i Œ≤ ‚Üê aux (by exact Nat.le_of_succ_le h) tl
    return tl.cons hd

/-- Monadic map. -/
def mapM [Monad m] (self : DList n Œ±) (f : Œ± ‚Üí m Œ≤) : m (DList n Œ≤) :=
  self.mapIdxM (ùïÇ f)

/-- Map, gives access to indices. -/
def mapIdx (self : DList n Œ±) (f : self.Idx ‚Üí Œ± ‚Üí Œ≤) : DList n Œ≤ :=
  self.mapIdxM (m := Id) (return f ¬∑ ¬∑)

/-- Map over lists. -/
protected def map (self : DList n Œ±) (f : Œ± ‚Üí Œ≤) : DList n Œ≤ :=
  self.mapM (m := Id) (return f ¬∑)

instance : Functor (DList n) where
  map f self := self.map f

@[inherit_doc many]
protected abbrev pure (a : Œ±) : DList n Œ± :=
  many a n

instance : Pure (DList n) := ‚ü®DList.pure‚ü©

/-! ## `fold` -/

/-- Monadic fold-left, gives access to indices. -/
def foldlIdxM [Monad m]
  (self : DList n Œ±)
  (init : Œ≤)
  (f : Œ≤ ‚Üí self.Idx ‚Üí Œ± ‚Üí m Œ≤)
: m Œ≤ :=
  aux (by simp) init self
where
  aux : {i : Nat} ‚Üí (h : i ‚â§ n) ‚Üí (acc : Œ≤) ‚Üí DList i Œ± ‚Üí m Œ≤
  | 0, _, acc, .nil => return acc
  | i + 1, h, acc, .cons hd tl => do
    let idx : self.Idx :=
      ‚ü®n - (i + 1), Nat.sub_lt_of_pos_le (by simp) h‚ü©
    let acc ‚Üê f acc idx hd
    aux (Nat.le_of_succ_le h) acc tl

/-- Monadic fold-left. -/
def foldlM [Monad m] (self : DList n Œ±) (init : Œ≤) (f : Œ≤ ‚Üí Œ± ‚Üí m Œ≤) : m Œ≤ :=
  self.foldlIdxM init fun b _ => f b

/-- Fold-left, gives access to indices. -/
def foldlIdx (self : DList n Œ±) (init : Œ≤) (f : Œ≤ ‚Üí self.Idx ‚Üí Œ± ‚Üí Œ≤) : Œ≤ :=
  self.foldlIdxM (m := Id) init f

/-- Fold-left over lists. -/
def foldl (self : DList n Œ±) (init : Œ≤) (f : Œ≤ ‚Üí Œ± ‚Üí Œ≤) : Œ≤ :=
  self.foldlM (m := Id) init f

/-! ## Element retrieval -/

/-- Retrieves an element. -/
def get {n : Nat} : (self : DList n Œ±) ‚Üí (idx : self.Idx) ‚Üí Œ±
| .cons hd _, ‚ü®0, _‚ü© => hd
| .cons _ tl, ‚ü®i + 1, h_i‚ü© => tl.get ‚ü®i, by omega‚ü©

/-- Retrieves an element if the index is legal. -/
def get? (self : DList n Œ±) (idx : Nat) : Option Œ± :=
  if h : idx < n then self.get ‚ü®idx, h‚ü© else none

/-- Retrieves an element if the index is legal, crashes otherwise. -/
def get! [Inhabited Œ±] (self : DList n Œ±) (idx : Nat) : Œ± :=
  if let some elm := self.get? idx
  then elm
  else panic! s!"illegal index `{idx}` for d-list of length `{n}`"

instance : GetElem? (DList n Œ±) Nat Œ± (fun _ idx => idx < n) where
  getElem self idx h := self.get ‚ü®idx, h‚ü©
  getElem? := get?
